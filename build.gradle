buildscript {
    repositories {
        mavenCentral()
    }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = 1.7
group = 'com.sequenceiq'

allprojects {
    apply from: "$rootDir/gradle/versioning.gradle"
    ext.config = new ConfigSlurper(env).parse(file("$rootDir/gradle/config/buildConfig.groovy").toURL())
}

jar {
    baseName = 'ambari-client'
}

configurations {
    deployerJars
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "$System.env.S3_BUCKET") {
                authentication(userName: "$System.env.NEXUS_USER", passphrase: "$System.env.NEXUS_PASSWORD")
            }
        }
    }
}

repositories {
    mavenCentral()
}

publishing {
  publications {
    maven(MavenPublication) {
      artifactId = jar.baseName

      from components.java
    }
  }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:slf4j-log4j12:1.7.7'
    compile 'org.codehaus.groovy:groovy-all:2.4.4'
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    compile 'commons-io:commons-io:2.4'
    compile "org.apache.httpcomponents:httpcore:4.3.1"
    compile "org.apache.httpcomponents:httpclient:4.3.1"
    compile "org.bouncycastle:bcpkix-jdk15on:1.51"

    testCompile 'org.easymock:easymock:3.2'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'

    deployerJars 'org.springframework.build.aws:org.springframework.build.aws.maven:3.0.0.RELEASE'
}


task buildInfo(type: BuildInfoTask) {
    destination = file("$buildDir")
    applicationPropertiesPath = "$buildDir"
    basename = jar.baseName
    buildVersion = version
}

compileJava.dependsOn buildInfo

task sourcesJar(type: Jar, dependsOn:classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

class BuildInfoTask extends DefaultTask {
    File destination = new File("build.info")
    String applicationPropertiesPath
    String basename
    String buildVersion

    @TaskAction
    def writeBuildInfo() {
        destination.mkdirs()
        File applicationDestination = new File(applicationPropertiesPath + "/resources/main")
        applicationDestination.mkdirs()
        new File(destination, "build.info").withWriter { out ->
            [
              "ARTIFACT_BASENAME=" + basename,
              "ARTIFACT_VERSION=" + buildVersion,
            ].each { out.println it }
        }
        new File(applicationDestination, "application.properties").withWriter { out ->
            [
              "info.app.name=" + basename,
              "info.app.version=" + buildVersion
            ].each { out.println it }
        }
    }
}
